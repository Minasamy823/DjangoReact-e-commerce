"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = require("./utils");

var _debugDataTraversal = _interopRequireDefault(require("./debugDataTraversal"));

var DebugData =
/*#__PURE__*/
function () {
  function DebugData(componentName, siteVariables, variables, styles) {
    (0, _classCallCheck2.default)(this, DebugData);
    this.componentName = componentName;
    this.siteVariables = siteVariables;
    this.variables = variables;
    this.styles = styles;
  }

  (0, _createClass2.default)(DebugData, [{
    key: "whosProp",
    value: function whosProp(propNameOrPredicate) {
      if (typeof propNameOrPredicate === 'function') {
        return (0, _debugDataTraversal.default)(this, function (data) {
          return (0, _utils.deepPickBy)(data, function (currentPropName) {
            return propNameOrPredicate(currentPropName);
          });
        });
      }

      return (0, _debugDataTraversal.default)(this, function (data) {
        return (0, _utils.deepPick)(data, propNameOrPredicate);
      });
    }
  }, {
    key: "whosPropContains",
    value: function whosPropContains(substring) {
      return this.whosProp(function (propName) {
        return (0, _utils.containsSubstring)(propName, substring);
      });
    }
  }, {
    key: "whosValue",
    value: function whosValue(valueOrPredicate) {
      if (typeof valueOrPredicate === 'function') {
        return (0, _debugDataTraversal.default)(this, function (data) {
          return (0, _utils.deepPickBy)(data, function (currentPropName, currentPropValue) {
            return valueOrPredicate(currentPropValue);
          });
        });
      }

      return (0, _debugDataTraversal.default)(this, function (data) {
        return (// This loose comparison (with two equal signs) is necessary
          // so that provided prop value of, say, number 400 for font weight
          // would trigger match for the values defined as string '400'.
          // tslint:disable:triple-equals
          (0, _utils.deepPickBy)(data, // eslint-disable-next-line eqeqeq
          function (currentPropName, currentPropValue) {
            return currentPropValue == valueOrPredicate;
          })
        );
      } // tslint:enable:triple-equals
      );
    }
  }, {
    key: "whosValueContains",
    value: function whosValueContains(substring) {
      return this.whosValue(function (value) {
        return (0, _utils.containsSubstring)(value, substring);
      });
    }
  }]);
  return DebugData;
}();

exports.default = DebugData;