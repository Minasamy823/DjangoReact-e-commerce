"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _mergeThemes = require("../mergeThemes");

var _debugData = _interopRequireDefault(require("./debugData"));

var _utils = require("./utils");

var Debug =
/*#__PURE__*/
function () {
  function Debug(_ref) {
    var componentName = _ref.componentName,
        themes = _ref.themes,
        instanceStylesOverrides = _ref.instanceStylesOverrides,
        instanceVariablesOverrides = _ref.instanceVariablesOverrides,
        resolveStyles = _ref.resolveStyles,
        resolveVariables = _ref.resolveVariables;
    (0, _classCallCheck2.default)(this, Debug);
    (0, _defineProperty2.default)(this, "componentName", void 0);
    (0, _defineProperty2.default)(this, "themes", void 0);
    (0, _defineProperty2.default)(this, "instanceStylesOverrides", void 0);
    (0, _defineProperty2.default)(this, "instanceVariablesOverrides", void 0);
    (0, _defineProperty2.default)(this, "resolveStyles", void 0);
    (0, _defineProperty2.default)(this, "resolveVariables", void 0);
    this.componentName = componentName;
    this.themes = themes;
    this.instanceStylesOverrides = instanceStylesOverrides;
    this.instanceVariablesOverrides = instanceVariablesOverrides;
    this.resolveStyles = resolveStyles;
    this.resolveVariables = resolveVariables;
  }

  (0, _createClass2.default)(Debug, [{
    key: "resolve",
    value: function resolve() {
      var _this = this;

      var siteVariablesDebugData = this.createDebugCategory({
        getDataFromTheme: function getDataFromTheme(theme) {
          return theme && theme.siteVariables;
        },
        args: {},
        resolve: function resolve(it) {
          return it;
        },
        merge: _mergeThemes.mergeSiteVariables,
        defaultValue: {}
      });
      var variablesDebugData = this.createDebugCategory({
        getDataFromTheme: function getDataFromTheme(theme) {
          return theme.componentVariables && theme.componentVariables[_this.componentName];
        },
        args: {
          siteVariables: siteVariablesDebugData.result
        },
        resolve: this.resolveVariables,
        merge: _mergeThemes.mergeComponentVariables,
        defaultValue: {},
        instanceOverrides: this.instanceVariablesOverrides
      });
      var stylesDebugData = this.createDebugCategory({
        getDataFromTheme: function getDataFromTheme(theme) {
          return theme && theme.componentStyles && theme.componentStyles[_this.componentName];
        },
        args: {
          siteVariables: siteVariablesDebugData.result,
          variables: variablesDebugData.result
        },
        resolve: this.resolveStyles,
        merge: _mergeThemes.mergeComponentStyles,
        defaultValue: {},
        instanceOverrides: this.instanceStylesOverrides ? {
          root: this.instanceStylesOverrides
        } : undefined
      });
      return new _debugData.default(this.componentName, siteVariablesDebugData, variablesDebugData, stylesDebugData);
    }
  }, {
    key: "createDebugCategory",
    value: function createDebugCategory(_ref2) {
      var getDataFromTheme = _ref2.getDataFromTheme,
          args = _ref2.args,
          resolve = _ref2.resolve,
          merge = _ref2.merge,
          defaultValue = _ref2.defaultValue,
          instanceOverrides = _ref2.instanceOverrides;
      var themeSources = this.themes.map(function (theme) {
        return getDataFromTheme(theme) || defaultValue;
      });
      var themeResolved = themeSources.map(resolve);
      var themeMerged = this.cumulativeMergeAndResolve(themeResolved, merge, resolve);
      var themeResult = (0, _utils.getLastOf)(themeMerged, resolve(defaultValue));
      var instance = instanceOverrides ? {
        src: instanceOverrides,
        args: args,
        resolved: resolve(instanceOverrides),
        merged: merge(themeResult, resolve(instanceOverrides))
      } : {};
      var result = instance.src ? resolve(merge(themeResult, resolve(instanceOverrides))) : themeResult;
      return {
        result: result,
        themes: themeSources.map(function (src, index) {
          return {
            src: src,
            args: args,
            resolved: themeResolved[index],
            merged: themeMerged[index]
          };
        }),
        instanceOverrides: instance
      };
    }
  }, {
    key: "cumulativeMergeAndResolve",
    value: function cumulativeMergeAndResolve(resolved, merge, resolve) {
      return resolved.map(function (item, index) {
        var merged = merge.apply(void 0, (0, _toConsumableArray2.default)(resolved.slice(0, index + 1)));
        return resolve(merged);
      });
    }
  }]);
  return Debug;
}();

exports.default = Debug;