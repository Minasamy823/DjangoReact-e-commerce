"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepPick = exports.deepPickBy = exports.isNotEmptyObjectsArray = exports.isNotNullOrEmpty = exports.getLastOf = exports.containsSubstring = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var containsSubstring = function containsSubstring(arg, substring) {
  return typeof arg === 'string' && arg.indexOf(substring) >= 0;
};

exports.containsSubstring = containsSubstring;

var getLastOf = function getLastOf(array, fallback) {
  return array.length > 0 ? array[array.length - 1] : fallback;
};

exports.getLastOf = getLastOf;

var isNotNullOrEmpty = function isNotNullOrEmpty(object) {
  if (object == null) {
    return false;
  }

  return Object.keys(object).length > 0;
};

exports.isNotNullOrEmpty = isNotNullOrEmpty;

var isNotEmptyObjectsArray = function isNotEmptyObjectsArray(array) {
  if (array == null) {
    return false;
  }

  return array.some(isNotNullOrEmpty);
};

exports.isNotEmptyObjectsArray = isNotEmptyObjectsArray;

var deepPickBy = function deepPickBy(object, predicate) {
  var seenObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (!object) {
    return {};
  }

  if (seenObjects.some(function (seenObject) {
    return seenObject === object;
  })) {
    throw new Error("Circular dependency detected.");
  }

  return Object.keys(object).reduce(function (acc, currentPropName) {
    if (predicate(currentPropName, object[currentPropName])) {
      return Object.assign({}, acc, (0, _defineProperty2.default)({}, currentPropName, object[currentPropName]));
    }

    if ((0, _typeof2.default)(object[currentPropName]) === 'object') {
      var deepPickResult = deepPickBy(object[currentPropName], predicate, [].concat((0, _toConsumableArray2.default)(seenObjects), [object]));

      if (isNotNullOrEmpty(deepPickResult)) {
        return Object.assign({}, acc, (0, _defineProperty2.default)({}, currentPropName, deepPickResult));
      }
    }

    return acc;
  }, {});
};

exports.deepPickBy = deepPickBy;

var deepPick = function deepPick(object, propName) {
  return deepPickBy(object, function (currentPropName) {
    return propName === currentPropName;
  });
};

exports.deepPick = deepPick;