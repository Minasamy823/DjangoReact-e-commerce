"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isEnabled = void 0;

var getFirstRefHookValue = function getFirstRefHookValue(fiber) {
  var stateHooks = fiber.memoizedState;
  var refHooks = stateHooks && stateHooks.memoizedState;
  return refHooks && refHooks.current;
};

var getFunctionComponentDebugData = function getFunctionComponentDebugData(component) {
  var fiberAccessorPropName = Object.keys(component).filter(function (key) {
    return key.startsWith('__reactInternalInstance');
  })[0];

  if (!fiberAccessorPropName) {
    throw new Error('Debug info was not found: fiber accessor prop is not detected.');
  }

  var domElementFiber = component[fiberAccessorPropName];

  if (!domElementFiber) {
    throw new Error('Debug info was not found: fiber element is not defined. Ensure that Stardust component is selected.');
  }

  return getFirstRefHookValue(domElementFiber._debugOwner);
};

var debugApi = function debugApi(inputComponent) {
  var component = inputComponent || window.$r;

  if (!component) {
    throw new Error('Debug info was not found: component is not provided as an input.');
  }

  var debug = component.renderComponent ? component.stardustDebug : getFunctionComponentDebugData(component);

  if (debug === null) {
    console.warn(['Debug data collection is disabled.', 'To enable it, paste `window.localStorage.stardustDebug = true` to your browser console and reload the page.'].join(' '));
    return undefined;
  }

  if (!debug) {
    console.error('No debug data available. Ensure that you have selected Stardust component to debug.');
    return undefined;
  }

  return debug.resolve();
};

debugApi.whosProp = function () {
  var _debugApi;

  return (_debugApi = debugApi()).whosProp.apply(_debugApi, arguments);
};

debugApi.whosPropContains = function () {
  var _debugApi2;

  return (_debugApi2 = debugApi()).whosPropContains.apply(_debugApi2, arguments);
};

debugApi.whosValue = function () {
  var _debugApi3;

  return (_debugApi3 = debugApi()).whosValue.apply(_debugApi3, arguments);
};

debugApi.whosValueContains = function () {
  var _debugApi4;

  return (_debugApi4 = debugApi()).whosValueContains.apply(_debugApi4, arguments);
};

var isDebugEnabled = function isDebugEnabled() {
  var enabled = false;

  try {
    var isProduction = process.env.NODE_ENV === 'production';
    var isEnabledBrowserOverride = !!window.localStorage.stardustDebug;

    if (isEnabledBrowserOverride) {
      console.warn(['@stardust-ui/react:', "Debug data collection is overriden to be enabled.", 'To remove this override paste `delete window.localStorage.stardustDebug` to your browser console and reload the page.'].join(' '));
    }

    enabled = isEnabledBrowserOverride || !isProduction;
  } catch (_unused) {}

  return enabled;
};

var isEnabled = isDebugEnabled();
exports.isEnabled = isEnabled;
var _default = debugApi;
exports.default = _default;