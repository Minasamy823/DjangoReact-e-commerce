"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.mergeStyles = exports.mergeAnimations = exports.mergeIcons = exports.mergeStaticStyles = exports.mergeFontFaces = exports.mergeThemeStyles = exports.mergeThemeVariables = exports.mergeSiteVariables = exports.mergeComponentVariables = exports.mergeComponentStyles = exports.emptyTheme = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _keys2 = _interopRequireDefault(require("lodash/keys"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var _union2 = _interopRequireDefault(require("lodash/union"));

var _isObject2 = _interopRequireDefault(require("lodash/isObject"));

var _merge2 = _interopRequireDefault(require("lodash/merge"));

var _forEach2 = _interopRequireDefault(require("lodash/forEach"));

var _callable = _interopRequireDefault(require("./callable"));

var _toCompactArray = _interopRequireDefault(require("./toCompactArray"));

var emptyTheme = {
  siteVariables: {
    fontSizes: {}
  },
  componentVariables: {},
  componentStyles: {},
  fontFaces: [],
  staticStyles: [],
  icons: {},
  animations: {} // ----------------------------------------
  // Component level merge functions
  // ----------------------------------------

  /**
   * Merges a single component's styles (keyed by component part) with another component's styles.
   */

};
exports.emptyTheme = emptyTheme;

var mergeComponentStyles = function mergeComponentStyles() {
  var initial = {};

  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  return sources.reduce(function (partStylesPrepared, stylesByPart) {
    (0, _forEach2.default)(stylesByPart, function (partStyle, partName) {
      // Break references to avoid an infinite loop.
      // We are replacing functions with a new ones that calls the originals.
      var originalTarget = partStylesPrepared[partName];
      var originalSource = partStyle;

      partStylesPrepared[partName] = function (styleParam) {
        return (0, _merge2.default)((0, _callable.default)(originalTarget)(styleParam), (0, _callable.default)(originalSource)(styleParam));
      };
    });
    return partStylesPrepared;
  }, initial);
};
/**
 * Merges a single component's variables with another component's variables.
 */


exports.mergeComponentStyles = mergeComponentStyles;

var mergeComponentVariables = function mergeComponentVariables() {
  var initial = function initial() {
    return {};
  };

  for (var _len2 = arguments.length, sources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    sources[_key2] = arguments[_key2];
  }

  return sources.reduce(function (acc, next) {
    return function () {
      var accumulatedVariables = acc.apply(void 0, arguments);
      var computedComponentVariables = (0, _callable.default)(next).apply(void 0, arguments);
      var mergedVariables = {};
      (0, _forEach2.default)(computedComponentVariables, function (variableToMerge, variableName) {
        var accumulatedVariable = accumulatedVariables[variableName];
        mergedVariables[variableName] = (0, _isObject2.default)(variableToMerge) && (0, _isObject2.default)(accumulatedVariable) ? Object.assign({}, accumulatedVariable, variableToMerge) : variableToMerge;
      });
      return Object.assign({}, accumulatedVariables, mergedVariables);
    };
  }, initial);
}; // ----------------------------------------
// Theme level merge functions
// ----------------------------------------

/**
 * Site variables can safely be merged at each Provider in the tree.
 * They are flat objects and do not depend on render-time values, such as props.
 */


exports.mergeComponentVariables = mergeComponentVariables;

var mergeSiteVariables = function mergeSiteVariables() {
  var initial = {
    fontSizes: {}
  };

  for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    sources[_key3] = arguments[_key3];
  }

  return sources.reduce(function (acc, next) {
    return Object.assign({}, acc, next);
  }, initial);
};
/**
 * Component variables can be objects, functions, or an array of these.
 * The functions must be called with the final result of siteVariables, otherwise
 *   the component variable objects would have no ability to apply siteVariables.
 * Therefore, componentVariables must be resolved by the component at render time.
 * We instead pass down call stack of component variable functions to be resolved later.
 */


exports.mergeSiteVariables = mergeSiteVariables;

var mergeThemeVariables = function mergeThemeVariables() {
  for (var _len4 = arguments.length, sources = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    sources[_key4] = arguments[_key4];
  }

  var displayNames = _union2.default.apply(void 0, (0, _toConsumableArray2.default)((0, _map2.default)(sources, _keys2.default)));

  return sources.reduce(function (acc, next) {
    return displayNames.reduce(function (componentVariables, displayName) {
      if (!next) return acc; // Break references to avoid an infinite loop.
      // We are replacing functions with new ones that calls the originals.

      var originalTarget = acc[displayName];
      var originalSource = next[displayName];

      componentVariables[displayName] = function () {
        return Object.assign({}, (0, _callable.default)(originalTarget).apply(void 0, arguments), (0, _callable.default)(originalSource).apply(void 0, arguments));
      };

      return componentVariables;
    }, {});
  }, {});
};
/**
 * See mergeThemeVariables() description.
 * Component styles adhere to the same pattern as component variables, except
 *   that they return style objects.
 */


exports.mergeThemeVariables = mergeThemeVariables;

var mergeThemeStyles = function mergeThemeStyles() {
  var initial = {};

  for (var _len5 = arguments.length, sources = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    sources[_key5] = arguments[_key5];
  }

  return sources.reduce(function (themeComponentStyles, next) {
    (0, _forEach2.default)(next, function (stylesByPart, displayName) {
      themeComponentStyles[displayName] = mergeComponentStyles(themeComponentStyles[displayName], stylesByPart);
    });
    return themeComponentStyles;
  }, initial);
};

exports.mergeThemeStyles = mergeThemeStyles;

var mergeFontFaces = function mergeFontFaces() {
  return _toCompactArray.default.apply(void 0, arguments);
};

exports.mergeFontFaces = mergeFontFaces;

var mergeStaticStyles = function mergeStaticStyles() {
  return _toCompactArray.default.apply(void 0, arguments);
};

exports.mergeStaticStyles = mergeStaticStyles;

var mergeIcons = function mergeIcons() {
  for (var _len6 = arguments.length, sources = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    sources[_key6] = arguments[_key6];
  }

  return Object.assign.apply(Object, [{}].concat(sources));
};

exports.mergeIcons = mergeIcons;

var mergeAnimations = function mergeAnimations() {
  for (var _len7 = arguments.length, sources = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    sources[_key7] = arguments[_key7];
  }

  return Object.assign.apply(Object, [{}].concat(sources));
};

exports.mergeAnimations = mergeAnimations;

var mergeStyles = function mergeStyles() {
  for (var _len8 = arguments.length, sources = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    sources[_key8] = arguments[_key8];
  }

  return function () {
    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      args[_key9] = arguments[_key9];
    }

    return sources.reduce(function (acc, next) {
      return (0, _merge2.default)(acc, (0, _callable.default)(next).apply(void 0, args));
    }, {});
  };
};

exports.mergeStyles = mergeStyles;

var mergeThemes = function mergeThemes() {
  for (var _len10 = arguments.length, themes = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    themes[_key10] = arguments[_key10];
  }

  return themes.reduce(function (acc, next) {
    if (!next) return acc;
    acc.siteVariables = mergeSiteVariables(acc.siteVariables, next.siteVariables);
    acc.componentVariables = mergeThemeVariables(acc.componentVariables, next.componentVariables);
    acc.componentStyles = mergeThemeStyles(acc.componentStyles, next.componentStyles); // Merge icons set, last one wins in case of collisions

    acc.icons = mergeIcons(acc.icons, next.icons);
    acc.fontFaces = mergeFontFaces.apply(void 0, (0, _toConsumableArray2.default)(acc.fontFaces).concat((0, _toConsumableArray2.default)(next.fontFaces || [])));
    acc.staticStyles = mergeStaticStyles.apply(void 0, (0, _toConsumableArray2.default)(acc.staticStyles).concat((0, _toConsumableArray2.default)(next.staticStyles || [])));
    acc.animations = mergeAnimations(acc.animations, next.animations);
    return acc;
  }, // .reduce() will modify "emptyTheme" object, so we should clone it before actual usage
  Object.assign({}, emptyTheme));
};

var _default = mergeThemes;
exports.default = _default;