"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _translateAlignProp = _interopRequireDefault(require("../../../../styles/translateAlignProp"));

var _default = {
  root: function root(_ref) {
    var _ref$props = _ref.props,
        as = _ref$props.as,
        animation = _ref$props.animation,
        atMention = _ref$props.atMention,
        color = _ref$props.color,
        disabled = _ref$props.disabled,
        error = _ref$props.error,
        important = _ref$props.important,
        size = _ref$props.size,
        success = _ref$props.success,
        temporary = _ref$props.temporary,
        align = _ref$props.align,
        timestamp = _ref$props.timestamp,
        truncated = _ref$props.truncated,
        weight = _ref$props.weight,
        v = _ref.variables;
    var colors = v.colorScheme[color];
    return Object.assign({}, color && colors && {
      color: colors.foreground
    }, animation && as === 'span' && {
      display: 'inline-block'
    }, atMention === true && {
      color: v.atMentionOtherColor
    }, atMention === 'me' && {
      color: v.atMentionMeColor
    }, truncated && {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    }, disabled && {
      color: v.disabledColor
    }, error && {
      color: v.errorColor
    }, success && {
      color: v.successColor
    }, important && {
      color: v.importantColor
    }, temporary && {
      fontStyle: 'italic'
    }, align && {
      display: 'block',
      textAlign: (0, _translateAlignProp.default)(align)
    }, timestamp && {
      color: v.timestampColor
    }, weight === 'light' && {
      fontWeight: v.fontWeightLight
    }, weight === 'semilight' && {
      fontWeight: v.fontWeightSemilight
    }, weight === 'regular' && {
      fontWeight: v.fontWeightRegular
    }, weight === 'semibold' && {
      fontWeight: v.fontWeightSemibold
    }, weight === 'bold' && {
      fontWeight: v.fontWeightBold
    }, size === 'smallest' && {
      fontSize: v.fontSizeSmallest,
      lineHeight: v.fontLineHeightSmallest
    }, size === 'smaller' && {
      fontSize: v.fontSizeSmaller,
      lineHeight: v.fontLineHeightSmaller
    }, size === 'small' && {
      fontSize: v.fontSizeSmall,
      lineHeight: v.fontLineHeightSmall
    }, size === 'medium' && {
      fontSize: v.fontSizeMedium,
      lineHeight: v.fontLineHeightMedium
    }, size === 'large' && {
      fontSize: v.fontSizeLarge,
      lineHeight: v.fontLineHeightLarge
    }, size === 'larger' && {
      fontSize: v.fontSizeLarger,
      lineHeight: v.fontLineHeightLarger
    }, size === 'largest' && {
      fontSize: v.fontSizeLargest,
      lineHeight: v.fontLineHeightLargest
    });
  }
};
exports.default = _default;