"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lib = require("../../../../lib");

var _iconNames = require("./iconNames");

var getXSpacingStyles = function getXSpacingStyles(xSpacing, horizontalSpace) {
  switch (xSpacing) {
    case 'none':
      return {
        marginLeft: 0,
        marginRight: 0
      };

    case 'before':
      return {
        marginLeft: horizontalSpace,
        marginRight: 0
      };

    case 'after':
      return {
        marginLeft: 0,
        marginRight: horizontalSpace
      };

    case 'both':
      return {
        marginLeft: horizontalSpace,
        marginRight: horizontalSpace
      };
  }
};

var getBorderedStyles = function getBorderedStyles(boxShadowColor) {
  return Object.assign({}, getPaddedStyle(), {
    boxShadow: "0 0 0 .05rem ".concat(boxShadowColor, " inset")
  });
};

var getPaddedStyle = function getPaddedStyle() {
  return {
    padding: (0, _lib.pxToRem)(4)
  };
};

var iconStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        t = _ref.theme,
        rtl = _ref.rtl;
    var iconSpec = t.icons[p.name] || _iconNames.emptyIcon;
    var isFontIcon = !iconSpec.isSvg;
    return Object.assign({
      speak: 'none',
      verticalAlign: 'middle'
    }, getXSpacingStyles(p.xSpacing, v.horizontalSpace), p.bordered && getBorderedStyles(v.borderColor), p.circular && Object.assign({}, getPaddedStyle(), {
      borderRadius: '50%'
    }), p.disabled && {
      color: v.disabledColor
    }, isFontIcon && {
      alignItems: 'center',
      boxSizing: 'content-box',
      display: 'inline-flex',
      justifyContent: 'center',
      fontFamily: iconSpec.icon.fontFamily,
      fontSize: v["".concat(p.size, "Size")],
      lineHeight: 1,
      width: v["".concat(p.size, "Size")],
      height: v["".concat(p.size, "Size")],
      '::before': {
        content: iconSpec.icon.content
      },
      transform: rtl ? "scaleX(-1) rotate(".concat(-1 * p.rotate, "deg)") : "rotate(".concat(p.rotate, "deg)")
    });
  }
};
var _default = iconStyles;
exports.default = _default;