"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _some2 = _interopRequireDefault(require("lodash/some"));

var _isNil2 = _interopRequireDefault(require("lodash/isNil"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _map2 = _interopRequireDefault(require("lodash/map"));

var React = _interopRequireWildcard(require("react"));

var customPropTypes = _interopRequireWildcard(require("@stardust-ui/react-proptypes"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactResizeDetector = _interopRequireDefault(require("react-resize-detector"));

var _reactComponentRef = require("@stardust-ui/react-component-ref");

var _lib = require("../../lib");

var _mergeThemes = require("../../lib/mergeThemes");

var _accessibility = require("../../lib/accessibility");

var _types = require("../../types");

var _ToolbarCustomItem = _interopRequireDefault(require("./ToolbarCustomItem"));

var _ToolbarDivider = _interopRequireDefault(require("./ToolbarDivider"));

var _ToolbarItem = _interopRequireDefault(require("./ToolbarItem"));

var _ToolbarMenu = _interopRequireDefault(require("./ToolbarMenu"));

var _ToolbarMenuDivider = _interopRequireDefault(require("./ToolbarMenuDivider"));

var _ToolbarMenuItem = _interopRequireDefault(require("./ToolbarMenuItem"));

var _ToolbarRadioGroup = _interopRequireDefault(require("./ToolbarRadioGroup"));

var _Box = _interopRequireDefault(require("../Box/Box"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var Toolbar =
/*#__PURE__*/
function (_UIComponent) {
  (0, _inherits2.default)(Toolbar, _UIComponent);

  function Toolbar() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Toolbar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Toolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      initialItems: [],
      currentItems: [],
      stable: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "wrapperRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hiddenToolbarRef", React.createRef());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "animationFrameId", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleItemOverrides", function (variables) {
      return function (predefinedProps) {
        return {
          variables: (0, _mergeThemes.mergeComponentVariables)(variables, predefinedProps.variables)
        };
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onResize", function (newWidth, newHeight) {
      _this.setState(function (_ref) {
        var initialItems = _ref.initialItems;
        return {
          currentItems: initialItems,
          stable: false
        };
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Toolbar, [{
    key: "renderItems",
    value: function renderItems(items, variables) {
      var itemOverridesFn = this.handleItemOverrides(variables);
      return (0, _map2.default)(items, function (item) {
        var kind = (0, _get2.default)(item, 'kind', 'item');

        switch (kind) {
          case 'divider':
            return _ToolbarDivider.default.create(item, {
              overrideProps: itemOverridesFn
            });

          case 'group':
            return _ToolbarRadioGroup.default.create(item, {
              overrideProps: itemOverridesFn
            });

          case 'toggle':
            return _ToolbarItem.default.create(item, {
              defaultProps: {
                accessibility: _accessibility.toggleButtonBehavior
              },
              overrideProps: itemOverridesFn
            });

          case 'custom':
            return _ToolbarCustomItem.default.create(item, {
              overrideProps: itemOverridesFn
            });

          default:
            return _ToolbarItem.default.create(item, {
              overrideProps: itemOverridesFn
            });
        }
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.afterComponentRendered();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.afterComponentRendered();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.animationFrameId !== undefined) {
        window.cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = undefined;
      }
    }
  }, {
    key: "afterComponentRendered",
    value: function afterComponentRendered() {
      var _this2 = this;

      if (this.animationFrameId !== undefined) {
        window.cancelAnimationFrame(this.animationFrameId);
      }

      this.animationFrameId = window.requestAnimationFrame(function () {
        _this2.animationFrameId = undefined;
        var onReduceItems = _this2.props.onReduceItems;

        if ((0, _isNil2.default)(onReduceItems) || !_this2.hiddenToolbarRef.current || _this2.state.stable) {
          return;
        }

        var _this2$measureOverflo = _this2.measureOverflow(),
            fits = _this2$measureOverflo.fits,
            measures = _this2$measureOverflo.measures;

        _this2.setState(function (_ref2) {
          var stable = _ref2.stable,
              currentItems = _ref2.currentItems;

          if (fits) {
            return {
              stable: true,
              stableItems: currentItems,
              currentItems: currentItems
            };
          }

          var reducedItems = onReduceItems(currentItems, measures);

          if (reducedItems === null) {
            return {
              stable: true,
              stableItems: currentItems,
              currentItems: currentItems
            };
          }

          return {
            stable: stable,
            currentItems: reducedItems
          };
        });
      });
    }
  }, {
    key: "measureOverflow",
    value: function measureOverflow() {
      var wrapperRect = this.wrapperRef.current.getBoundingClientRect();
      var hiddenToolbarElement = this.hiddenToolbarRef.current;
      var measures = (0, _map2.default)(hiddenToolbarElement.children, function (child) {
        var rect = child.getBoundingClientRect();
        return {
          left: rect.left,
          leftFits: rect.left >= wrapperRect.left,
          right: rect.right,
          rightFits: rect.right <= wrapperRect.right
        };
      });
      var fits = !(0, _some2.default)(measures, function (c) {
        return !c.leftFits || !c.rightFits;
      });
      return {
        fits: fits,
        measures: measures
      };
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref3) {
      var _this3 = this;

      var accessibility = _ref3.accessibility,
          ElementType = _ref3.ElementType,
          classes = _ref3.classes,
          variables = _ref3.variables,
          unhandledProps = _ref3.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          items = _this$props.items,
          onReduceItems = _this$props.onReduceItems,
          measurement = _this$props.measurement,
          wrapper = _this$props.wrapper;

      if (!(0, _isNil2.default)(onReduceItems)) {
        return React.createElement(_reactComponentRef.Ref, {
          innerRef: this.wrapperRef
        }, _Box.default.create(wrapper, {
          defaultProps: Object.assign({
            className: (0, _classnames.default)(Toolbar.slotClassNames.wrapper, classes.wrapper)
          }, accessibility.attributes.wrapper, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.wrapper, wrapper)),
          overrideProps: function overrideProps() {
            return {
              children: React.createElement(React.Fragment, null, !_this3.state.stable && _Box.default.create(measurement, {
                defaultProps: Object.assign({
                  className: (0, _classnames.default)(Toolbar.slotClassNames.measurement, classes.measurement)
                }, accessibility.attributes.measurement, (0, _lib.applyAccessibilityKeyHandlers)(accessibility.keyHandlers.measurement, wrapper)),
                overrideProps: function overrideProps() {
                  return {
                    children: React.createElement(_reactComponentRef.Ref, {
                      innerRef: _this3.hiddenToolbarRef
                    }, React.createElement(ElementType, (0, _extends2.default)({
                      className: classes.root
                    }, accessibility.attributes.root, unhandledProps), _this3.renderItems(_this3.state.currentItems, variables)))
                  };
                }
              }), _this3.state.stableItems && React.createElement(ElementType, (0, _extends2.default)({
                className: classes.root
              }, accessibility.attributes.root, unhandledProps), _this3.renderItems(_this3.state.stableItems, variables)), React.createElement(_reactResizeDetector.default, {
                xskipOnMount: true,
                handleWidth: true,
                onResize: _this3.onResize
              }))
            };
          }
        }));
      }

      return React.createElement(ElementType, (0, _extends2.default)({
        className: classes.root
      }, accessibility.attributes.root, unhandledProps), (0, _lib.childrenExist)(children) ? children : this.renderItems(items, variables));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      if (props.items === state.initialItems) {
        return null;
      }

      return {
        initialItems: props.items,
        currentItems: props.items,
        stableItems: state.stableItems,
        stable: false
      };
    }
  }]);
  return Toolbar;
}(_lib.UIComponent);

(0, _defineProperty2.default)(Toolbar, "create", void 0);
(0, _defineProperty2.default)(Toolbar, "className", 'ui-toolbar');
(0, _defineProperty2.default)(Toolbar, "slotClassNames", {
  wrapper: "".concat(Toolbar.className, "__wrapper"),
  measurement: "".concat(Toolbar.className, "__measurement")
});
(0, _defineProperty2.default)(Toolbar, "displayName", 'Toolbar');
(0, _defineProperty2.default)(Toolbar, "propTypes", Object.assign({}, _lib.commonPropTypes.createCommon(), {
  items: customPropTypes.collectionShorthandWithKindProp(['divider', 'item', 'group', 'toggle', 'custom']),
  onReduceItems: PropTypes.func,
  measurement: customPropTypes.itemShorthand,
  wrapper: customPropTypes.itemShorthand
}));
(0, _defineProperty2.default)(Toolbar, "defaultProps", {
  accessibility: _accessibility.toolbarBehavior,
  measurement: {},
  wrapper: {}
});
(0, _defineProperty2.default)(Toolbar, "CustomItem", _ToolbarCustomItem.default);
(0, _defineProperty2.default)(Toolbar, "Divider", _ToolbarDivider.default);
(0, _defineProperty2.default)(Toolbar, "Item", _ToolbarItem.default);
(0, _defineProperty2.default)(Toolbar, "Menu", _ToolbarMenu.default);
(0, _defineProperty2.default)(Toolbar, "MenuDivider", _ToolbarMenuDivider.default);
(0, _defineProperty2.default)(Toolbar, "MenuItem", _ToolbarMenuItem.default);
(0, _defineProperty2.default)(Toolbar, "RadioGroup", _ToolbarRadioGroup.default);
Toolbar.create = (0, _lib.createShorthandFactory)({
  Component: Toolbar,
  mappedProp: 'content'
});
/**
 * A Toolbar is a container for grouping a set of controls, often action controls (e.g. buttons) or input controls (e.g. checkboxes).
 *
 * @accessibility
 *  * Implements [ARIA Toolbar](https://www.w3.org/TR/wai-aria-practices-1.1/#toolbar) design pattern.
 * @accessibilityIssues
 * [Issue 988424: VoiceOver narrates selected for button in toolbar](https://bugs.chromium.org/p/chromium/issues/detail?id=988424)
 */

var _default = (0, _types.withSafeTypeForAs)(Toolbar);

exports.default = _default;