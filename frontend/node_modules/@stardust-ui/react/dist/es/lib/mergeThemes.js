import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _keys from "lodash/keys";
import _map from "lodash/map";
import _union from "lodash/union";
import _isObject from "lodash/isObject";
import _merge from "lodash/merge";
import _forEach from "lodash/forEach";
import callable from './callable';
import toCompactArray from './toCompactArray';
export var emptyTheme = {
  siteVariables: {
    fontSizes: {}
  },
  componentVariables: {},
  componentStyles: {},
  fontFaces: [],
  staticStyles: [],
  icons: {},
  animations: {} // ----------------------------------------
  // Component level merge functions
  // ----------------------------------------

  /**
   * Merges a single component's styles (keyed by component part) with another component's styles.
   */

};
export var mergeComponentStyles = function mergeComponentStyles() {
  var initial = {};

  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }

  return sources.reduce(function (partStylesPrepared, stylesByPart) {
    _forEach(stylesByPart, function (partStyle, partName) {
      // Break references to avoid an infinite loop.
      // We are replacing functions with a new ones that calls the originals.
      var originalTarget = partStylesPrepared[partName];
      var originalSource = partStyle;

      partStylesPrepared[partName] = function (styleParam) {
        return _merge(callable(originalTarget)(styleParam), callable(originalSource)(styleParam));
      };
    });

    return partStylesPrepared;
  }, initial);
};
/**
 * Merges a single component's variables with another component's variables.
 */

export var mergeComponentVariables = function mergeComponentVariables() {
  var initial = function initial() {
    return {};
  };

  for (var _len2 = arguments.length, sources = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    sources[_key2] = arguments[_key2];
  }

  return sources.reduce(function (acc, next) {
    return function () {
      var accumulatedVariables = acc.apply(void 0, arguments);
      var computedComponentVariables = callable(next).apply(void 0, arguments);
      var mergedVariables = {};

      _forEach(computedComponentVariables, function (variableToMerge, variableName) {
        var accumulatedVariable = accumulatedVariables[variableName];
        mergedVariables[variableName] = _isObject(variableToMerge) && _isObject(accumulatedVariable) ? Object.assign({}, accumulatedVariable, variableToMerge) : variableToMerge;
      });

      return Object.assign({}, accumulatedVariables, mergedVariables);
    };
  }, initial);
}; // ----------------------------------------
// Theme level merge functions
// ----------------------------------------

/**
 * Site variables can safely be merged at each Provider in the tree.
 * They are flat objects and do not depend on render-time values, such as props.
 */

export var mergeSiteVariables = function mergeSiteVariables() {
  var initial = {
    fontSizes: {}
  };

  for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    sources[_key3] = arguments[_key3];
  }

  return sources.reduce(function (acc, next) {
    return Object.assign({}, acc, next);
  }, initial);
};
/**
 * Component variables can be objects, functions, or an array of these.
 * The functions must be called with the final result of siteVariables, otherwise
 *   the component variable objects would have no ability to apply siteVariables.
 * Therefore, componentVariables must be resolved by the component at render time.
 * We instead pass down call stack of component variable functions to be resolved later.
 */

export var mergeThemeVariables = function mergeThemeVariables() {
  for (var _len4 = arguments.length, sources = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    sources[_key4] = arguments[_key4];
  }

  var displayNames = _union.apply(void 0, _toConsumableArray(_map(sources, _keys)));

  return sources.reduce(function (acc, next) {
    return displayNames.reduce(function (componentVariables, displayName) {
      if (!next) return acc; // Break references to avoid an infinite loop.
      // We are replacing functions with new ones that calls the originals.

      var originalTarget = acc[displayName];
      var originalSource = next[displayName];

      componentVariables[displayName] = function () {
        return Object.assign({}, callable(originalTarget).apply(void 0, arguments), callable(originalSource).apply(void 0, arguments));
      };

      return componentVariables;
    }, {});
  }, {});
};
/**
 * See mergeThemeVariables() description.
 * Component styles adhere to the same pattern as component variables, except
 *   that they return style objects.
 */

export var mergeThemeStyles = function mergeThemeStyles() {
  var initial = {};

  for (var _len5 = arguments.length, sources = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    sources[_key5] = arguments[_key5];
  }

  return sources.reduce(function (themeComponentStyles, next) {
    _forEach(next, function (stylesByPart, displayName) {
      themeComponentStyles[displayName] = mergeComponentStyles(themeComponentStyles[displayName], stylesByPart);
    });

    return themeComponentStyles;
  }, initial);
};
export var mergeFontFaces = function mergeFontFaces() {
  return toCompactArray.apply(void 0, arguments);
};
export var mergeStaticStyles = function mergeStaticStyles() {
  return toCompactArray.apply(void 0, arguments);
};
export var mergeIcons = function mergeIcons() {
  for (var _len6 = arguments.length, sources = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    sources[_key6] = arguments[_key6];
  }

  return Object.assign.apply(Object, [{}].concat(sources));
};
export var mergeAnimations = function mergeAnimations() {
  for (var _len7 = arguments.length, sources = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
    sources[_key7] = arguments[_key7];
  }

  return Object.assign.apply(Object, [{}].concat(sources));
};
export var mergeStyles = function mergeStyles() {
  for (var _len8 = arguments.length, sources = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
    sources[_key8] = arguments[_key8];
  }

  return function () {
    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      args[_key9] = arguments[_key9];
    }

    return sources.reduce(function (acc, next) {
      return _merge(acc, callable(next).apply(void 0, args));
    }, {});
  };
};

var mergeThemes = function mergeThemes() {
  for (var _len10 = arguments.length, themes = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
    themes[_key10] = arguments[_key10];
  }

  return themes.reduce(function (acc, next) {
    if (!next) return acc;
    acc.siteVariables = mergeSiteVariables(acc.siteVariables, next.siteVariables);
    acc.componentVariables = mergeThemeVariables(acc.componentVariables, next.componentVariables);
    acc.componentStyles = mergeThemeStyles(acc.componentStyles, next.componentStyles); // Merge icons set, last one wins in case of collisions

    acc.icons = mergeIcons(acc.icons, next.icons);
    acc.fontFaces = mergeFontFaces.apply(void 0, _toConsumableArray(acc.fontFaces).concat(_toConsumableArray(next.fontFaces || [])));
    acc.staticStyles = mergeStaticStyles.apply(void 0, _toConsumableArray(acc.staticStyles).concat(_toConsumableArray(next.staticStyles || [])));
    acc.animations = mergeAnimations(acc.animations, next.animations);
    return acc;
  }, // .reduce() will modify "emptyTheme" object, so we should clone it before actual usage
  Object.assign({}, emptyTheme));
};

export default mergeThemes;