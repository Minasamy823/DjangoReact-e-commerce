import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { mergeSiteVariables, mergeComponentVariables, mergeComponentStyles } from '../mergeThemes';
import DebugData from './debugData';
import { getLastOf } from './utils';

var Debug =
/*#__PURE__*/
function () {
  function Debug(_ref) {
    var componentName = _ref.componentName,
        themes = _ref.themes,
        instanceStylesOverrides = _ref.instanceStylesOverrides,
        instanceVariablesOverrides = _ref.instanceVariablesOverrides,
        resolveStyles = _ref.resolveStyles,
        resolveVariables = _ref.resolveVariables;

    _classCallCheck(this, Debug);

    _defineProperty(this, "componentName", void 0);

    _defineProperty(this, "themes", void 0);

    _defineProperty(this, "instanceStylesOverrides", void 0);

    _defineProperty(this, "instanceVariablesOverrides", void 0);

    _defineProperty(this, "resolveStyles", void 0);

    _defineProperty(this, "resolveVariables", void 0);

    this.componentName = componentName;
    this.themes = themes;
    this.instanceStylesOverrides = instanceStylesOverrides;
    this.instanceVariablesOverrides = instanceVariablesOverrides;
    this.resolveStyles = resolveStyles;
    this.resolveVariables = resolveVariables;
  }

  _createClass(Debug, [{
    key: "resolve",
    value: function resolve() {
      var _this = this;

      var siteVariablesDebugData = this.createDebugCategory({
        getDataFromTheme: function getDataFromTheme(theme) {
          return theme && theme.siteVariables;
        },
        args: {},
        resolve: function resolve(it) {
          return it;
        },
        merge: mergeSiteVariables,
        defaultValue: {}
      });
      var variablesDebugData = this.createDebugCategory({
        getDataFromTheme: function getDataFromTheme(theme) {
          return theme.componentVariables && theme.componentVariables[_this.componentName];
        },
        args: {
          siteVariables: siteVariablesDebugData.result
        },
        resolve: this.resolveVariables,
        merge: mergeComponentVariables,
        defaultValue: {},
        instanceOverrides: this.instanceVariablesOverrides
      });
      var stylesDebugData = this.createDebugCategory({
        getDataFromTheme: function getDataFromTheme(theme) {
          return theme && theme.componentStyles && theme.componentStyles[_this.componentName];
        },
        args: {
          siteVariables: siteVariablesDebugData.result,
          variables: variablesDebugData.result
        },
        resolve: this.resolveStyles,
        merge: mergeComponentStyles,
        defaultValue: {},
        instanceOverrides: this.instanceStylesOverrides ? {
          root: this.instanceStylesOverrides
        } : undefined
      });
      return new DebugData(this.componentName, siteVariablesDebugData, variablesDebugData, stylesDebugData);
    }
  }, {
    key: "createDebugCategory",
    value: function createDebugCategory(_ref2) {
      var getDataFromTheme = _ref2.getDataFromTheme,
          args = _ref2.args,
          resolve = _ref2.resolve,
          merge = _ref2.merge,
          defaultValue = _ref2.defaultValue,
          instanceOverrides = _ref2.instanceOverrides;
      var themeSources = this.themes.map(function (theme) {
        return getDataFromTheme(theme) || defaultValue;
      });
      var themeResolved = themeSources.map(resolve);
      var themeMerged = this.cumulativeMergeAndResolve(themeResolved, merge, resolve);
      var themeResult = getLastOf(themeMerged, resolve(defaultValue));
      var instance = instanceOverrides ? {
        src: instanceOverrides,
        args: args,
        resolved: resolve(instanceOverrides),
        merged: merge(themeResult, resolve(instanceOverrides))
      } : {};
      var result = instance.src ? resolve(merge(themeResult, resolve(instanceOverrides))) : themeResult;
      return {
        result: result,
        themes: themeSources.map(function (src, index) {
          return {
            src: src,
            args: args,
            resolved: themeResolved[index],
            merged: themeMerged[index]
          };
        }),
        instanceOverrides: instance
      };
    }
  }, {
    key: "cumulativeMergeAndResolve",
    value: function cumulativeMergeAndResolve(resolved, merge, resolve) {
      return resolved.map(function (item, index) {
        var merged = merge.apply(void 0, _toConsumableArray(resolved.slice(0, index + 1)));
        return resolve(merged);
      });
    }
  }]);

  return Debug;
}();

export { Debug as default };