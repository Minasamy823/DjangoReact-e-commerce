import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { deepPick, deepPickBy, containsSubstring } from './utils';
import traverse from './debugDataTraversal';

var DebugData =
/*#__PURE__*/
function () {
  function DebugData(componentName, siteVariables, variables, styles) {
    _classCallCheck(this, DebugData);

    this.componentName = componentName;
    this.siteVariables = siteVariables;
    this.variables = variables;
    this.styles = styles;
  }

  _createClass(DebugData, [{
    key: "whosProp",
    value: function whosProp(propNameOrPredicate) {
      if (typeof propNameOrPredicate === 'function') {
        return traverse(this, function (data) {
          return deepPickBy(data, function (currentPropName) {
            return propNameOrPredicate(currentPropName);
          });
        });
      }

      return traverse(this, function (data) {
        return deepPick(data, propNameOrPredicate);
      });
    }
  }, {
    key: "whosPropContains",
    value: function whosPropContains(substring) {
      return this.whosProp(function (propName) {
        return containsSubstring(propName, substring);
      });
    }
  }, {
    key: "whosValue",
    value: function whosValue(valueOrPredicate) {
      if (typeof valueOrPredicate === 'function') {
        return traverse(this, function (data) {
          return deepPickBy(data, function (currentPropName, currentPropValue) {
            return valueOrPredicate(currentPropValue);
          });
        });
      }

      return traverse(this, function (data) {
        return (// This loose comparison (with two equal signs) is necessary
          // so that provided prop value of, say, number 400 for font weight
          // would trigger match for the values defined as string '400'.
          // tslint:disable:triple-equals
          deepPickBy(data, // eslint-disable-next-line eqeqeq
          function (currentPropName, currentPropValue) {
            return currentPropValue == valueOrPredicate;
          })
        );
      } // tslint:enable:triple-equals
      );
    }
  }, {
    key: "whosValueContains",
    value: function whosValueContains(substring) {
      return this.whosValue(function (value) {
        return containsSubstring(value, substring);
      });
    }
  }]);

  return DebugData;
}();

export { DebugData as default };