import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { createRenderer, felaRenderer } from './felaRenderer';
import mergeThemes from './mergeThemes';
var registeredRenderers = new WeakMap();
export var mergeRenderers = function mergeRenderers(current, next) {
  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;

  if (next) {
    return next;
  }

  if (target === document) {
    return felaRenderer;
  }

  if (registeredRenderers.has(target)) {
    return registeredRenderers.get(target);
  }

  var createdRenderer = createRenderer();
  registeredRenderers.set(target, createdRenderer);
  return createdRenderer;
};
export var mergeBooleanValues = function mergeBooleanValues(target) {
  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }

  return sources.reduce(function (acc, next) {
    return typeof next === 'boolean' ? next : acc;
  }, target);
};

var mergeProviderContexts = function mergeProviderContexts() {
  var emptyContext = {
    theme: {
      siteVariables: {},
      componentVariables: {},
      componentStyles: {},
      fontFaces: [],
      staticStyles: [],
      icons: {},
      animations: {}
    },
    rtl: false,
    disableAnimations: false,
    originalThemes: [],
    target: document
  };

  for (var _len2 = arguments.length, contexts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    contexts[_key2] = arguments[_key2];
  }

  return contexts.reduce(function (acc, next) {
    if (!next) return acc;
    acc.theme = mergeThemes(acc.theme, next.theme); // Latest RTL value wins

    var mergedRTL = mergeBooleanValues(acc.rtl, next.rtl);

    if (typeof mergedRTL === 'boolean') {
      acc.rtl = mergedRTL;
    } // Use provided renderer if it is defined


    acc.target = next.target || acc.target;
    acc.renderer = mergeRenderers(acc.renderer, next.renderer, acc.target); // Latest disableAnimations value wins

    var mergedDisableAnimations = mergeBooleanValues(acc.disableAnimations, next.disableAnimations);

    if (typeof mergedDisableAnimations === 'boolean') {
      acc.disableAnimations = mergedDisableAnimations;
    }

    var contextOriginalThemes = next.originalThemes ? next.originalThemes : [next.theme];
    acc.originalThemes = [].concat(_toConsumableArray(acc.originalThemes), _toConsumableArray(contextOriginalThemes));
    return acc;
  }, emptyContext);
};

export default mergeProviderContexts;