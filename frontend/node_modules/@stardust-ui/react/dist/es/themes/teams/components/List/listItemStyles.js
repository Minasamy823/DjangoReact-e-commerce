import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { pxToRem } from '../../../../lib';
import { screenReaderContainerStyles } from '../../../../lib/accessibility/Styles/accessibilityStyles';
import { default as ListItem } from '../../../../components/List/ListItem';
var truncateStyle = {
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
};

var selectableHoverStyle = function selectableHoverStyle(p, v) {
  var _ref;

  return _ref = {
    background: v.selectableFocusHoverBackgroundColor,
    color: v.selectableFocusHoverColor,
    cursor: 'pointer'
  }, _defineProperty(_ref, "& .".concat(ListItem.slotClassNames.header), {
    color: 'inherit'
  }), _defineProperty(_ref, "& .".concat(ListItem.slotClassNames.content), {
    color: 'inherit'
  }), _defineProperty(_ref, "& .".concat(ListItem.slotClassNames.headerMedia), Object.assign({}, screenReaderContainerStyles, {
    color: 'inherit'
  })), _defineProperty(_ref, "& .".concat(ListItem.slotClassNames.contentMedia), {
    display: 'none',
    color: 'inherit'
  }), _defineProperty(_ref, "& .".concat(ListItem.slotClassNames.endMedia), {
    display: 'block',
    color: 'inherit'
  }), _ref;
};

var selectableFocusStyle = function selectableFocusStyle(p, v) {
  return Object.assign({}, selectableHoverStyle(p, v), {
    outline: 0,
    ':focus-visible': {
      outline: ".2rem solid ".concat(v.selectedFocusOutlineColor),
      zIndex: 1
    }
  });
};

var selectedStyle = function selectedStyle(variables) {
  return {
    background: variables.selectedBackgroundColor,
    color: variables.selectedColor
  };
};

var listItemStyles = {
  root: function root(_ref2) {
    var _Object$assign;

    var p = _ref2.props,
        v = _ref2.variables;
    return Object.assign({
      minHeight: v.minHeight,
      padding: v.rootPadding
    }, (p.selectable || p.navigable) && Object.assign((_Object$assign = {
      position: 'relative'
    }, _defineProperty(_Object$assign, "& .".concat(ListItem.slotClassNames.endMedia), {
      display: 'none'
    }), _defineProperty(_Object$assign, '&:hover', selectableHoverStyle(p, v)), _defineProperty(_Object$assign, '&:focus', selectableFocusStyle(p, v)), _Object$assign), p.selected && selectedStyle(v)), p.important && {
      fontWeight: 'bold'
    });
  },
  media: function media(_ref3) {
    var p = _ref3.props;
    return Object.assign({}, p.important && {
      '::before': {
        content: '""',
        position: 'absolute',
        left: pxToRem(8),
        width: pxToRem(2),
        height: pxToRem(2),
        background: '#000'
      }
    }, (p.header || p.content) && {
      marginRight: pxToRem(8)
    });
  },
  header: function header(_ref4) {
    var p = _ref4.props,
        v = _ref4.variables;
    return Object.assign({
      fontSize: v.headerFontSize,
      lineHeight: v.headerLineHeight
    }, p.truncateHeader && truncateStyle, (!p.content || p.headerMedia) && {
      marginRight: pxToRem(8)
    });
  },
  headerMedia: function headerMedia(_ref5) {
    var v = _ref5.variables;
    return {
      fontSize: v.headerMediaFontSize,
      lineHeight: v.headerMediaLineHeight,
      alignSelf: 'flex-end'
    };
  },
  content: function content(_ref6) {
    var p = _ref6.props,
        v = _ref6.variables;
    return Object.assign({
      fontSize: v.contentFontSize,
      lineHeight: v.contentLineHeight
    }, p.truncateContent && truncateStyle, (!p.header || p.contentMedia) && {
      marginRight: pxToRem(8)
    });
  },
  contentMedia: function contentMedia(_ref7) {
    var p = _ref7.props,
        v = _ref7.variables;
    return {
      fontSize: v.contentMediaFontSize,
      lineHeight: v.contentMediaLineHeight
    };
  },
  endMedia: function endMedia(_ref8) {
    var p = _ref8.props;
    return Object.assign({}, (p.selectable || p.navigable) && {
      display: 'none'
    }, {
      flexShrink: 0
    });
  },
  main: function main() {
    return {
      minWidth: 0 // needed for the truncate styles to work

    };
  }
};
export default listItemStyles;