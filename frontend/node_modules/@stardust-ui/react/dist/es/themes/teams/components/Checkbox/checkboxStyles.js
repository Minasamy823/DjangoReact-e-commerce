import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import Checkbox from '../../../../components/Checkbox/Checkbox';
import getBorderFocusStyles from '../../getBorderFocusStyles';
var checkboxStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables,
        t = _ref.theme;
    return Object.assign({
      color: v.textColor,
      padding: v.rootPadding,
      verticalAlign: 'middle',
      alignItems: 'start'
    }, getBorderFocusStyles({
      siteVariables: t.siteVariables,
      borderRadius: '3px'
    }), {
      ':hover': _defineProperty({
        color: v.textColorHover
      }, "& .".concat(Checkbox.slotClassNames.indicator), Object.assign({}, p.checked && {
        background: v.checkedBackgroundHover
      }, !p.checked && Object.assign({
        borderColor: v.borderColorHover
      }, p.toggle && {
        color: v.borderColorHover
      })))
    }, p.checked && {
      color: v.checkedTextColor
    }, p.disabled && {
      pointerEvents: 'none',
      color: v.disabledColor
    });
  },
  checkbox: function checkbox(_ref2) {
    var p = _ref2.props,
        v = _ref2.variables;
    return Object.assign({
      background: v.background,
      borderColor: v.borderColor,
      borderStyle: v.borderStyle,
      borderRadius: v.borderRadius,
      borderWidth: v.borderWidth,
      color: v.indicatorColor,
      margin: v.margin,
      padding: v.padding
    }, p.checked && {
      background: v.checkedBackground,
      borderColor: v.checkedBorderColor,
      color: v.checkedIndicatorColor
    }, p.disabled && {
      background: v.disabledBackground,
      borderColor: v.disabledBorderColor
    }, p.disabled && p.checked && {
      color: v.disabledCheckedIndicatorColor,
      background: v.disabledBackgroundChecked,
      borderColor: 'transparent'
    });
  },
  toggle: function toggle(_ref3) {
    var p = _ref3.props,
        v = _ref3.variables;
    return Object.assign(_defineProperty({
      background: v.background,
      borderColor: v.borderColor,
      borderStyle: v.borderStyle,
      borderRadius: v.toggleBorderRadius,
      borderWidth: v.borderWidth,
      color: v.borderColor,
      margin: v.toggleMargin,
      padding: v.togglePadding,
      transition: 'padding .3s ease'
    }, "& svg", {
      width: v.toggleIndicatorSize,
      height: v.toggleIndicatorSize
    }), p.checked && {
      background: v.checkedBackground,
      borderColor: v.checkedBorderColor,
      color: v.checkedIndicatorColor,
      padding: v.toggleCheckedPadding
    }, p.disabled && {
      color: v.disabledToggleIndicatorColor,
      background: v.disabledBackground,
      borderColor: v.disabledBorderColor
    }, p.disabled && p.checked && {
      color: v.disabledCheckedIndicatorColor,
      background: v.disabledBackgroundChecked,
      borderColor: 'transparent'
    });
  }
};
export default checkboxStyles;