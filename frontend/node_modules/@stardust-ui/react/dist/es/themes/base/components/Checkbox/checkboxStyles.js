var checkboxStyles = {
  root: function root(_ref) {
    var p = _ref.props,
        v = _ref.variables;
    return Object.assign({
      alignItems: 'center',
      position: 'relative',
      display: 'inline-grid',
      // IE11: Gap is done via virtual column as in autoprefixer
      gridTemplateColumns: p.labelPosition === 'start' ? "1fr ".concat(v.gap, " auto") : "auto ".concat(v.gap, " 1fr"),
      cursor: 'pointer',
      outline: 0,
      padding: v.padding
    }, p.disabled && {
      color: v.disabledColor,
      cursor: 'default'
    });
  },
  checkbox: function checkbox(_ref2) {
    var p = _ref2.props,
        v = _ref2.variables;
    return Object.assign({
      gridColumn: p.labelPosition === 'start' ? 3 : 1,
      '-ms-grid-row-align': 'center',
      borderColor: v.borderColor,
      borderStyle: v.borderStyle,
      borderRadius: v.borderRadius,
      borderWidth: v.borderWidth,
      boxShadow: 'unset',
      color: v.checkboxColor,
      margin: v.margin,
      padding: v.padding
    }, p.checked && {
      background: v.checkedBackground,
      borderColor: v.checkedBorderColor,
      color: v.checkboxCheckedColor
    }, p.disabled && Object.assign({
      borderColor: v.disabledCheckboxColor
    }, p.checked && {
      color: v.disabledCheckboxColor,
      background: v.disabledBackground
    }));
  },
  label: function label(_ref3) {
    var p = _ref3.props;
    return {
      display: 'block',
      // IE11: should be forced to be block, as inline-block is not supported
      gridColumn: p.labelPosition === 'start' ? 1 : 3
    };
  },
  toggle: function toggle(_ref4) {
    var p = _ref4.props,
        v = _ref4.variables;
    return Object.assign({
      '-ms-grid-row-align': 'center',
      gridColumn: p.labelPosition === 'start' ? 3 : 1,
      background: v.toggleBackground,
      borderColor: v.toggleBorderColor,
      borderStyle: v.toggleBorderStyle,
      borderRadius: v.toggleBorderRadius,
      borderWidth: v.toggleBorderWidth,
      boxShadow: 'unset',
      color: v.toggleIndicatorColor,
      margin: v.toggleMargin,
      padding: v.togglePadding,
      transition: 'padding .3s ease'
    }, p.checked && {
      background: v.checkboxToggleCheckedBackground,
      borderColor: v.checkboxToggleCheckedBorderColor,
      color: v.checkboxToggleCheckedColor,
      padding: v.toggleCheckedPadding
    }, p.disabled && {
      background: v.disabledToggleBackground,
      borderColor: v.disabledToggleBorderColor,
      color: v.disabledToggleIndicatorColor
    });
  }
};
export default checkboxStyles;