import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import cx from 'classnames';
import { Ref, toRefObject } from '@stardust-ui/react-component-ref';
import { EventListener } from '@stardust-ui/react-component-event-listener';
import { UIComponent, createShorthandFactory, doesNodeContainClick, commonPropTypes, childrenExist, applyAccessibilityKeyHandlers } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import { Popper } from '../../lib/positioner';
import { toolbarItemBehavior } from '../../lib/accessibility';
import ToolbarMenu from './ToolbarMenu';
import Icon from '../Icon/Icon';
import Box from '../Box/Box';
import Popup from '../Popup/Popup';
import { mergeComponentVariables } from '../../lib/mergeThemes';

var ToolbarItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ToolbarItem, _UIComponent);

  function ToolbarItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ToolbarItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToolbarItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        event.preventDefault();

        _this.handleClick(event);
      },
      closeMenuAndFocusTrigger: function closeMenuAndFocusTrigger(event) {
        _this.trySetMenuOpen(false, event);

        if (_this.itemRef) {
          _this.itemRef.current.focus();
        }
      },
      doNotNavigateNextToolbarItem: function doNotNavigateNextToolbarItem(event) {
        event.stopPropagation();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "itemRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "menuRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "handleWrapperBlur", function (e) {
      if (_this.props.menu && !e.currentTarget.contains(e.relatedTarget)) {
        _this.trySetMenuOpen(false, e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (e) {
      _invoke(_this.props, 'onBlur', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (e) {
      _invoke(_this.props, 'onFocus', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          menu = _this$props.menu,
          menuOpen = _this$props.menuOpen;

      if (disabled) {
        e.preventDefault();
        return;
      }

      if (menu) {
        _this.trySetMenuOpen(!menuOpen, e);
      }

      _invoke(_this.props, 'onClick', e, _this.props);
    });

    _defineProperty(_assertThisInitialized(_this), "handleOutsideClick", function (e) {
      if (!doesNodeContainClick(_this.menuRef.current, e, _this.context.target) && !doesNodeContainClick(_this.itemRef.current, e, _this.context.target)) {
        _this.trySetMenuOpen(false, e);
      }
    });

    return _this;
  }

  _createClass(ToolbarItem, [{
    key: "renderSubmenu",
    value: function renderSubmenu(menu, variables) {
      var _this2 = this;

      var targetRef = toRefObject(this.context.target);
      return React.createElement(React.Fragment, null, React.createElement(Ref, {
        innerRef: this.menuRef
      }, React.createElement(Popper, {
        align: "start",
        position: "above",
        targetRef: this.itemRef
      }, ToolbarMenu.create(menu, {
        overrideProps: function overrideProps(predefinedProps) {
          return {
            onItemClick: function onItemClick(e, itemProps) {
              _invoke(predefinedProps, 'onItemClick', e, itemProps); // TODO: should we pass toolbarMenuItem to the user callback so he can decide if he wants to close the menu?


              _this2.trySetMenuOpen(false, e);

              if (_this2.itemRef) {
                _this2.itemRef.current.focus();
              }
            },
            variables: mergeComponentVariables(variables, predefinedProps.variables)
          };
        }
      }))), React.createElement(EventListener, {
        listener: this.handleOutsideClick,
        targetRef: targetRef,
        type: "click",
        capture: true
      }));
    }
  }, {
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var _this3 = this;

      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          unhandledProps = _ref.unhandledProps,
          accessibility = _ref.accessibility,
          variables = _ref.variables;
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          children = _this$props2.children,
          disabled = _this$props2.disabled,
          popup = _this$props2.popup,
          menu = _this$props2.menu,
          menuOpen = _this$props2.menuOpen,
          wrapper = _this$props2.wrapper;
      var renderedItem = React.createElement(ElementType, _extends({}, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {
        disabled: disabled,
        className: classes.root,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onClick: this.handleClick
      }), childrenExist(children) ? children : Icon.create(icon));
      var submenu = menuOpen ? this.renderSubmenu(menu, variables) : null;

      if (popup) {
        return Popup.create(popup, {
          defaultProps: {
            trapFocus: true
          },
          overrideProps: {
            trigger: renderedItem,
            children: undefined // force-reset `children` defined for `Popup` as it collides with the `trigger

          }
        });
      } // wrap the item if it has menu (even if it is closed = not rendered)


      if (menu) {
        if (wrapper) {
          return Box.create(wrapper, {
            defaultProps: Object.assign({
              className: cx(ToolbarItem.slotClassNames.wrapper, classes.wrapper)
            }, accessibility.attributes.wrapper, applyAccessibilityKeyHandlers(accessibility.keyHandlers.wrapper, wrapper)),
            overrideProps: function overrideProps() {
              return {
                children: React.createElement(React.Fragment, null, React.createElement(Ref, {
                  innerRef: _this3.itemRef
                }, renderedItem), submenu),
                onBlur: _this3.handleWrapperBlur
              };
            }
          });
        }

        return React.createElement(React.Fragment, null, React.createElement(Ref, {
          innerRef: this.itemRef
        }, renderedItem), submenu);
      }

      return React.createElement(Ref, {
        innerRef: this.itemRef
      }, renderedItem);
    }
  }, {
    key: "trySetMenuOpen",
    value: function trySetMenuOpen(newValue, e) {
      _invoke(this.props, 'onMenuOpenChange', e, Object.assign({}, this.props, {
        menuOpen: newValue
      }));
    }
  }]);

  return ToolbarItem;
}(UIComponent);

_defineProperty(ToolbarItem, "displayName", 'ToolbarItem');

_defineProperty(ToolbarItem, "className", 'ui-toolbar__item');

_defineProperty(ToolbarItem, "slotClassNames", {
  wrapper: "".concat(ToolbarItem.className, "__wrapper")
});

_defineProperty(ToolbarItem, "create", void 0);

_defineProperty(ToolbarItem, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.itemShorthandWithoutJSX,
  menu: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),
  menuOpen: PropTypes.bool,
  onMenuOpenChange: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  popup: PropTypes.oneOfType([PropTypes.shape(Object.assign({}, Popup.propTypes, {
    trigger: customPropTypes.never,
    children: customPropTypes.never
  })), PropTypes.string]),
  wrapper: customPropTypes.itemShorthand
}));

_defineProperty(ToolbarItem, "defaultProps", {
  as: 'button',
  accessibility: toolbarItemBehavior,
  wrapper: {}
});

ToolbarItem.create = createShorthandFactory({
  Component: ToolbarItem,
  mappedProp: 'content'
});
/**
 * A ToolbarItem renders Toolbar item as a button with an icon.
 */

export default withSafeTypeForAs(ToolbarItem);