import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _invoke from "lodash/invoke";
import * as React from 'react';
import cx from 'classnames';
import * as PropTypes from 'prop-types';
import * as customPropTypes from '@stardust-ui/react-proptypes';
import { commonPropTypes, UIComponent, createShorthandFactory, childrenExist, applyAccessibilityKeyHandlers } from '../../lib';
import { withSafeTypeForAs } from '../../types';
import { menuItemBehavior } from '../../lib/accessibility';
import Box from '../Box/Box';
import Icon from '../Icon/Icon';

var ToolbarMenuItem =
/*#__PURE__*/
function (_UIComponent) {
  _inherits(ToolbarMenuItem, _UIComponent);

  function ToolbarMenuItem() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ToolbarMenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToolbarMenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "actionHandlers", {
      performClick: function performClick(event) {
        event.preventDefault();

        _this.handleClick(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (e) {
      var disabled = _this.props.disabled;

      if (disabled) {
        e.preventDefault();
        return;
      }

      _invoke(_this.props, 'onClick', e, _this.props);
    });

    return _this;
  }

  _createClass(ToolbarMenuItem, [{
    key: "renderComponent",
    value: function renderComponent(_ref) {
      var ElementType = _ref.ElementType,
          classes = _ref.classes,
          accessibility = _ref.accessibility,
          unhandledProps = _ref.unhandledProps;
      var _this$props = this.props,
          children = _this$props.children,
          content = _this$props.content,
          disabled = _this$props.disabled,
          icon = _this$props.icon,
          wrapper = _this$props.wrapper;
      var menuItemInner = childrenExist(children) ? children : React.createElement(ElementType, _extends({}, accessibility.attributes.root, unhandledProps, applyAccessibilityKeyHandlers(accessibility.keyHandlers.root, unhandledProps), {
        disabled: disabled,
        className: classes.root,
        onClick: this.handleClick
      }), childrenExist(children) ? children : React.createElement(React.Fragment, null, Icon.create(icon, {
        defaultProps: {
          xSpacing: !!content ? 'after' : 'none'
        }
      }), content));

      if (!wrapper) {
        return menuItemInner;
      }

      return Box.create(wrapper, {
        defaultProps: Object.assign({
          className: cx(ToolbarMenuItem.slotClassNames.wrapper, classes.wrapper)
        }, accessibility.attributes.wrapper),
        overrideProps: function overrideProps() {
          return {
            children: menuItemInner
          };
        }
      });
    }
  }]);

  return ToolbarMenuItem;
}(UIComponent);

_defineProperty(ToolbarMenuItem, "displayName", 'ToolbarMenuItem');

_defineProperty(ToolbarMenuItem, "className", 'ui-toolbar__menuitem');

_defineProperty(ToolbarMenuItem, "slotClassNames", {
  wrapper: "".concat(ToolbarMenuItem.className, "__wrapper")
});

_defineProperty(ToolbarMenuItem, "create", void 0);

_defineProperty(ToolbarMenuItem, "propTypes", Object.assign({}, commonPropTypes.createCommon(), {
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  icon: customPropTypes.itemShorthand,
  onClick: PropTypes.func,
  wrapper: customPropTypes.itemShorthand
}));

_defineProperty(ToolbarMenuItem, "defaultProps", {
  as: 'button',
  accessibility: menuItemBehavior,
  wrapper: {
    as: 'li'
  }
});

ToolbarMenuItem.create = createShorthandFactory({
  Component: ToolbarMenuItem,
  mappedProp: 'content'
});
/**
 * A ToolbarMenuItem renders ToolbarMenu item as button.
 */

export default withSafeTypeForAs(ToolbarMenuItem);